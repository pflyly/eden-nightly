name: Build Eden Nightly
concurrency:
  group: build-eden-nightly-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  appimage: 
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - target: steamdeck
            runs-on: ubuntu-latest
          - target: rog
            runs-on: ubuntu-latest
          - target: common
            runs-on: ubuntu-latest            
          - target: check
            runs-on: ubuntu-latest
          - target: aarch64
            runs-on: ubuntu-24.04-arm
    continue-on-error: true
    container: ghcr.io/pkgforge-dev/archlinux:latest
    name: "Appimage (${{ matrix.target }})"
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
          
      - name: Set up cache for vcpkg
        uses: actions/cache@v4.2.3
        with:
          path: /github/home/.cache/vcpkg/archives
          key: ${{ runner.os }}-${{ matrix.target }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-vcpkg-

      - name: Set up ccache for check
        if: ${{ matrix.target == 'check' }}
        uses: actions/cache@v4.2.3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-check-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-check-
            
      - name: Install dependencies
        run: |
          chmod +x ./get-dependencies.sh
          ./get-dependencies.sh
          
      - name: Get the latest release tag
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"      
        run: |
            api_url="https://api.github.com/repos/${{ github.repository }}"
            latest_release_info=$(curl -H "Authorization: token $GH_TOKEN" "$api_url/releases/latest")
            last_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name')
            echo "${last_release_tag}"
            old_hash="${last_release_tag##*-}"
            echo "OLD_HASH=$old_hash" >> "$GITHUB_ENV"
       
      - name: Compile Eden ${{ matrix.target }}
        run: |
          chmod +x ./eden-appimage.sh
          ./eden-appimage.sh ${{ matrix.target }}
          mkdir -p dist
          mv *.AppImage* dist/

      - name: Upload artifact
        if: ${{ matrix.target != 'check' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: eden-${{ matrix.target}}-appimage
          path: "dist"

      - name: Upload hash file
        if: ${{ matrix.target == 'check' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: hash
          path: ~/hash
          
      - name: Upload changelog
        if: ${{ matrix.target == 'check' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: changelog
          path: ~/changelog
          
  android: 
    runs-on: ubuntu-latest
    name: "Android"
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Install dependencies
        run: |
          sudo apt-get install glslang-tools libvulkan-dev -y
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
        
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Compile Eden android
        run: |
          chmod +x ./eden-android.sh
          ./eden-android.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
         name: eden-android-universal
         path: eden/src/android/artifacts/
          
  windows:
    runs-on: windows-latest
    name: "Windows MSVC (${{ matrix.target }})"
    continue-on-error: true
    strategy:
      matrix:
        include:
           - target: x86_64
             arch: x86_64
             qt_arch: win64_msvc2022_64
           - target: x86_arm64
             arch: ARM64
             qt_arch: win64_msvc2022_arm64_cross_compiled
    env:
      TARGET: ${{ matrix.target }}
      ARCH: ${{ matrix.arch }}        
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v4.2.2
      
      - name: Create vcpkg binary cache directory
        run: mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
        
      - name: Set up cache for vcpkg
        uses: actions/cache@v4.2.3
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-${{ matrix.target }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-vcpkg-

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.target }} 
          
      - name: Install extra tools
        run: choco install cmake 7zip wget -y --no-progress
        
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.3'
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          # modules: qtmultimedia qtwebengine
          cache: 'true'
          
      - name: Install vulkan-sdk
        shell: bash
        run: |
           VULKAN_URL="https://sdk.lunarg.com/sdk/download/1.4.313.0/windows/vulkansdk-windows-X64-1.4.313.0.exe"
           wget -q "$VULKAN_URL" -O D:/a/_temp/vulkan.exe
           D:/a/_temp/vulkan.exe --accept-licenses --default-answer --confirm-command install
           echo "VULKAN_SDK=C:/VulkanSDK/1.4.313.0" >> $GITHUB_ENV
           echo "PATH=C:/VulkanSDK/1.4.313.0/Bin:$PATH" >> $GITHUB_ENV          
        
      - name: Compile Eden Windows
        shell: bash
        run: |
          chmod +x ./eden-windows.sh
          ./eden-windows.sh
          
      - name: Upload
        uses: actions/upload-artifact@v4.6.2
        with:
          name: eden-windows-msvc-${{ matrix.target }}
          path: eden/build/artifacts/
          
  macos:
    runs-on: ${{ matrix.runs-on }}
    name: "MacOS (${{ matrix.target }})"
    strategy:
      matrix:
       include:
          - target: x86_64
            runs-on: macos-13
          - target: arm64
            runs-on: macos-15
    continue-on-error: true
    env:
      TARGET: ${{ matrix.target }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-ccache-
            
      - name: Install dependencies
        run: |
          brew install --formula autoconf automake boost ccache ffmpeg fmt glslang hidapi libtool nlohmann-json qt@6 sdl2 speexdsp zlib zlib cmake Catch2 molten-vk vulkan-loader
        
      - name: Compile Eden MacOS (${{ matrix.target }})
        run: |
          chmod +x ./eden-macos.sh
          ./eden-macos.sh
          
      - name: Upload
        uses: actions/upload-artifact@v4.6.2
        with:
          name: eden-macos-${{ matrix.target }}
          path: eden/build/artifacts/
                    
  release:
    name: "release"
    if: ${{ github.ref_name == 'main' }}
    needs: [appimage, windows, android, macos]
    permissions:
      actions: read
      security-events: write
      contents: write
    runs-on: ubuntu-latest
    steps:    
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-steamdeck-appimage
        continue-on-error: true
 
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-rog-appimage
        continue-on-error: true
 
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-common-appimage
        continue-on-error: true
        
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-aarch64-appimage
        continue-on-error: true
        
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-android-universal
        continue-on-error: true
 
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-windows-msvc
        continue-on-error: true
        
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-macos-x86_64
        continue-on-error: true
        
      - uses: actions/download-artifact@v4.3.0
        with:
           name: eden-macos-arm64
        continue-on-error: true
        
      - uses: actions/download-artifact@v4.3.0
        with:
           name: hash
           
      - uses: actions/download-artifact@v4.3.0
        with:
           name: changelog   
           
      - name: Generate changelog
        run: |
          export VERSION="$(cat hash)"
          echo "APP_VERSION=${VERSION}" >> "${GITHUB_ENV}"
          echo "BODY<<EOF" >> "${GITHUB_ENV}"
          cat changelog >> "${GITHUB_ENV}"
          echo "EOF" >> "${GITHUB_ENV}"
          echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"     

      - name: Delete same tag release
        run: |
          gh release delete "${{ env.date }}-${{ env.APP_VERSION }}" --repo "${GITHUB_REPOSITORY}" --cleanup-tag  -y
          sleep 10
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        continue-on-error: true

      - name: Build Releaser
        uses: softprops/action-gh-release@v2
        with:
          name: "Eden Nightly Release: ${{ env.APP_VERSION }}"
          tag_name: "${{ env.date }}-${{ env.APP_VERSION }}"
          body: "${{ env.BODY }}"
          prerelease: false
          draft: false
          generate_release_notes: false
          fail_on_unmatched_files: false
          make_latest: true
          files: |
            *.AppImage*, *.7z, *.apk
